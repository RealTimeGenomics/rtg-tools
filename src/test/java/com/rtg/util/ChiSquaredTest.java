/*
 * Copyright (c) 2017. Real Time Genomics Limited.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.rtg.util;

import junit.framework.TestCase;

/**
 */
public class ChiSquaredTest extends TestCase {

  // table of test values for chi-squared from Excel
  private static final double[] CHI_TESTS = {
    0.0000392, 0.0001570, 0.0157906, 0.1015311, 0.4549361, 1.3233041, 6.6348912, 7.8793998,
    0.0100246, 0.0201004, 0.2107207, 0.5753639, 1.3862935, 2.7725904, 9.2103510, 10.5965296,
    0.0717234, 0.1148316, 0.5843754, 1.2125320, 2.3659727, 4.1083421, 11.3448821, 12.8380732,
    0.2069836, 0.2971068, 1.0636242, 1.9225579, 3.3566947, 5.3852660, 13.2766985, 14.8601657,
    0.4117508, 0.5542969, 1.6103090, 2.6746041, 4.3514586, 6.6256784, 15.0863174, 16.7496484,
    0.6757333, 0.8720832, 2.2041303, 3.4545975, 5.3481190, 7.8408057, 16.8118718, 18.5475126,
    0.9892508, 1.2390317, 2.8331052, 4.2548521, 6.3458092, 9.0371459, 18.4753240, 20.2777379,
    1.3444027, 1.6465061, 3.4895374, 5.0706416, 7.3441201, 10.2188537, 20.0901591, 21.9548610,
    1.7349113, 2.0878894, 4.1681557, 5.8988229, 8.3428320, 11.3887495, 21.6660475, 23.5892747,
    2.1558453, 2.5581988, 4.8651783, 6.7371985, 9.3418160, 12.5488588, 23.2092871, 25.1880548,
    2.6032019, 3.0534957, 5.5777883, 7.5841448, 10.3409955, 13.7006896, 24.7250219, 26.7568637,
    3.0737850, 3.5705513, 6.3037958, 8.4384194, 11.3403218, 14.8453990, 26.2169636, 28.2996598,
    3.5650419, 4.1068996, 7.0414996, 9.2990632, 12.3397530, 15.9839051, 27.6881844, 29.8193179,
    4.0746588, 4.6604154, 7.7895376, 10.1653113, 13.3392718, 17.1169327, 29.1411632, 31.3194251,
    4.6008740, 5.2293559, 8.5467531, 11.0365376, 14.3388571, 18.2450841, 30.5779507, 32.8014906,
    5.1421642, 5.8121968, 9.3122352, 11.9122165, 15.3384973, 19.3688565, 31.9998609, 34.2670534,
    5.6972736, 6.4077419, 10.0851829, 12.7919245, 16.3381789, 20.4886785, 33.4087169, 35.7183777,
    6.2647658, 7.0149034, 10.8649368, 13.6752906, 17.3379019, 21.6048861, 34.8052374, 37.1563855,
    6.8439233, 7.6326976, 11.6509119, 14.5619976, 18.3376499, 22.7178052, 36.1907746, 38.5821223,
    7.4338113, 8.2603683, 12.4426014, 15.4517746, 19.3374296, 23.8276894, 37.5662715, 39.9968557,
    8.0336021, 8.8971724, 13.2395955, 16.3443872, 20.3372281, 24.9347831, 38.9322324, 41.4009426,
    8.6426806, 9.5424944, 14.0414895, 17.2396184, 21.3370437, 26.0392635, 40.2894484, 42.7956640,
    9.2603830, 10.1956888, 14.8479543, 18.1372940, 22.3368798, 27.1413290, 41.6383344, 44.1813850,
    9.8861986, 10.8563494, 15.6586793, 19.0372504, 23.3367298, 28.2411500, 42.9797812, 45.5583626,
    10.5196470, 11.5239511, 16.4734054, 19.9393376, 24.3365837, 29.3388465, 44.3140141, 46.9279660,
    11.1602177, 12.1981768, 17.2918796, 20.8434347, 25.3364584, 30.4345587, 45.6416361, 48.2897774,
    11.8076549, 12.8784684, 18.1138885, 21.7494036, 26.3363413, 31.5284104, 46.9628371, 49.6450354,
    12.4612810, 13.5646661, 18.9392353, 22.6571574, 27.3362315, 32.6204888, 48.2781661, 50.9935587,
    13.1210666, 14.2564061, 19.7677395, 23.5665882, 28.3361295, 33.7109064, 49.5878290, 52.3354952,
    13.7866816, 14.9534644, 20.5992447, 24.4776030, 29.3360283, 34.7997355, 50.8921805, 53.6718679,
    14.4577359, 15.6554668, 21.4335652, 25.3901368, 30.3359446, 35.8870722, 52.1913543, 55.0024820,
    15.1340182, 16.3622033, 22.2705905, 26.3041099, 31.3358571, 36.9729862, 53.4856583, 56.3279922,
    15.8151796, 17.0734801, 23.1101881, 27.2194373, 32.3357855, 38.0575209, 54.7754469, 57.6483094,
    16.5012991, 17.7891042, 23.9522468, 28.1360774, 33.3357049, 39.1407765, 56.0608521, 58.9637086,
    17.1917287, 18.5088695, 24.7966478, 29.0539590, 34.3356352, 40.2227863, 57.3419878, 60.2745916,
    17.8867502, 19.2326276, 25.6432916, 29.9730451, 35.3355726, 41.3036144, 58.6191506, 61.5810737,
    18.5858844, 19.9602677, 26.4920865, 30.8932588, 36.3355183, 42.3832971, 59.8925632, 62.8831717,
    19.2888188, 20.6914104, 27.3429568, 31.8145645, 37.3354493, 43.4619026, 61.1620201, 64.1812293,
    19.9958261, 21.4261387, 28.1957911, 32.7369191, 38.3354044, 44.5394608, 62.4280869, 65.4753198,
    20.7065768, 22.1642011, 29.0505160, 33.6602883, 39.3353414, 45.6160060, 63.6907705, 66.7660469,
    21.4207504, 22.9055587, 29.9070839, 34.5846330, 40.3352966, 46.6915990, 64.9499801, 68.0526253,
    22.1383809, 23.6501413, 30.7654203, 35.5099175, 41.3352457, 47.7662443, 66.2062938, 69.3360371,
    22.8595681, 24.3975686, 31.6254552, 36.4360837, 42.3352009, 48.8399993, 67.4592908, 70.6157305,
    23.5836203, 25.1480116, 32.4871336, 37.3631327, 43.3351634, 49.9128925, 68.7096432, 71.8923417,
    24.3109820, 25.9012002, 33.3503775, 38.2910108, 44.3351176, 50.9849425, 69.9569009, 73.1660357,
    25.0413005, 26.6571860, 34.2151686, 39.2197076, 45.3350773, 52.0561853, 71.2014977, 74.4367066,
    25.7745002, 27.4158206, 35.0814209, 40.1491921, 46.3350367, 53.1266599, 72.4431654, 75.7038507,
    26.5106734, 28.1769725, 35.9491383, 41.0794290, 47.3350105, 54.1963578, 73.6825628, 76.9689228,
    27.2493694, 28.9405947, 36.8182313, 42.0103973, 48.3349709, 55.2653297, 74.9193941, 78.2305521,
    27.9908246, 29.7067252, 37.6886371, 42.9420818, 49.3349409, 56.3336138, 76.1538019, 79.4898394,
    28.7347385, 30.4750106, 38.5603737, 43.8744545, 50.3349018, 57.4011771, 77.3860068, 80.7464507,
    29.4810771, 31.2456862, 39.4333749, 44.8074980, 51.3348707, 58.4680864, 78.6156321, 82.0006222,
    30.2300183, 32.0185478, 40.3076093, 45.7412007, 52.3348421, 59.5343396, 79.8433633, 83.2525128,
    30.9811231, 32.7934300, 41.1830389, 46.6755222, 53.3348155, 60.5999787, 81.0687827, 84.5017627,
    31.7348944, 33.5705163, 42.0596196, 47.6104696, 54.3347868, 61.6650070, 82.2919767, 85.7490581,
    32.4906265, 34.3495446, 42.9373265, 48.5460035, 55.3347570, 62.7294291, 83.5135510, 86.9939773,
    33.2482310, 35.1305593, 43.8161611, 49.4821220, 56.3347455, 63.7932572, 84.7326537, 88.2365621,
    34.0084670, 35.9135100, 44.6960216, 50.4188078, 57.3347199, 64.8565328, 85.9501455, 89.4769881,
    34.7703768, 36.6981752, 45.5769394, 51.3560527, 58.3346901, 65.9192583, 87.1658325, 90.7153328,
    35.5343971, 37.4847956, 46.4588848, 52.2938096, 59.3346678, 66.9814685, 88.3794304, 91.9518058,
    36.3004603, 38.2731953, 47.3418143, 53.2321055, 60.3346496, 68.0431235, 89.5912152, 93.1862153,
    37.0683273, 39.0632583, 48.2256956, 54.1709199, 61.3346217, 69.1042911, 90.8015028, 94.4185265,
    37.8383010, 39.8550871, 49.1105348, 55.1102227, 62.3346028, 70.1649588, 92.0098913, 95.6491901,
    38.6097353, 40.6485140, 49.9962772, 56.0500043, 63.3345780, 71.2251381, 93.2167023, 96.8779437,
    39.3832265, 41.4435538, 50.8829347, 56.9902676, 64.3345565, 72.2848411, 94.4219958, 98.1049157,
    40.1582883, 42.2402455, 51.7704728, 57.9309995, 65.3345408, 73.3440858, 95.6255948, 99.3302677,
    40.9348768, 43.0383564, 52.6588571, 58.8721834, 66.3345223, 74.4028773, 96.8276800, 100.5537749,
    41.7135681, 43.8380387, 53.5480565, 59.8137904, 67.3345126, 75.4612274, 98.0283212, 101.7757403,
    42.4934268, 44.6391700, 54.4381133, 60.7558522, 68.3344948, 76.5191612, 99.2274083, 102.9961359,
    43.2753050, 45.4417001, 55.3289446, 61.6983266, 69.3344785, 77.5766471, 100.4250514, 104.2147688,
    44.0584364, 46.2456399, 56.2205724, 62.6412160, 70.3344541, 78.6337306, 101.6214381, 105.4322813,
    44.8432000, 47.0510201, 57.1129408, 63.5845099, 71.3344448, 79.6904131, 102.8163446, 106.6473249,
    45.6291398, 47.8577291, 58.0060836, 64.5282065, 72.3344308, 80.7466917, 104.0097696, 107.8618625,
    46.4168393, 48.6656642, 58.8999578, 65.4722921, 73.3344129, 81.8025883, 105.2019269, 109.0741740,
    47.2061439, 49.4751216, 59.7945569, 66.4167499, 74.3343955, 82.8581034, 106.3928506, 110.2854268,
    47.9963544, 50.2855258, 60.6898581, 67.3615896, 75.3343798, 83.9132569, 107.5824369, 111.4953691,
    48.7884731, 51.0973189, 61.5858549, 68.3067964, 76.3343682, 84.9680442, 108.7708887, 112.7037356,
    49.5814052, 51.9104100, 62.4825128, 69.2523418, 77.3343538, 86.0224530, 109.9582195, 113.9106930,
    50.3759668, 52.7247814, 63.3798536, 70.1982578, 78.3343426, 87.0765226, 111.1440332, 115.1163105,
    51.1719331, 53.5399831, 64.2778420, 71.1445054, 79.3343248, 88.1302516, 112.3287913, 116.3209276,
    51.9690425, 54.3566812, 65.1764623, 72.0911069, 80.3343156, 89.1836367, 113.5123463, 117.5239554,
    52.7671933, 55.1742752, 66.0757212, 73.0380361, 81.3343072, 90.2367047, 114.6947561, 118.7261486,
    53.5668681, 55.9930084, 66.9756059, 73.9852727, 82.3342899, 91.2894309, 115.8761614, 119.9269582,
    54.3677646, 56.8129250, 67.8760886, 74.9328372, 83.3342768, 92.3418478, 117.0566171, 121.1261794,
    55.1695014, 57.6339089, 68.7771471, 75.8807206, 84.3342649, 93.3939572, 118.2355679, 122.3244135,
    55.9725781, 58.4558827, 69.6787998, 76.8289113, 85.3342653, 94.4457300, 119.4137427, 123.5218175,
    56.7770134, 59.2790576, 70.5810299, 77.7774129, 86.3342556, 95.4972187, 120.5908815, 124.7175692,
    57.5824595, 60.1029491, 71.4838612, 78.7262009, 87.3342434, 96.5484090, 121.7671599, 125.9122820,
    58.3887623, 60.9279887, 72.3871884, 79.6752859, 88.3342295, 97.5993200, 122.9421709, 127.1059809,
    59.1963269, 61.7540186, 73.2910793, 80.6246594, 89.3342157, 98.6499239, 124.1161954, 128.2986758,
    60.0048847, 62.5809732, 74.1955195, 81.5743162, 90.3342074, 99.7002493, 125.2893164, 129.4901841,
    60.8145966, 63.4089172, 75.1004895, 82.5242494, 91.3342009, 100.7503077, 126.4615976, 130.6811829,
    61.6251739, 64.2379969, 76.0059492, 83.4744574, 92.3341903, 101.8000939, 127.6329834, 131.8705040,
    62.4368531, 65.0676083, 76.9119392, 84.4249453, 93.3341809, 102.8495964, 128.8032108, 133.0589218,
    63.2495124, 65.8982568, 77.8184420, 85.3756798, 94.3341647, 103.8988307, 129.9725312, 134.2465580,
    64.0633446, 66.7300340, 78.7254070, 86.3266870, 95.3341654, 104.9478360, 131.1411004, 135.4327425,
    64.8777974, 67.5623438, 79.6328677, 87.2779466, 96.3341533, 105.9965648, 132.3088658, 136.6188454,
    65.6934823, 68.3957128, 80.5408176, 88.2294490, 97.3341457, 107.0450417, 133.4756153, 137.8029657,
    66.5099065, 69.2298558, 81.4492497, 89.1812096, 98.3341390, 108.0932661, 134.6414895, 138.9869179,
    67.3275332, 70.0649950, 82.3581268, 90.1332250, 99.3341298, 109.1412313, 135.8068909, 140.1697141,
    68.1458676, 70.9007184, 83.2674659, 91.0854608, 100.3341283, 110.1889771, 136.9710915, 141.3509337,
    68.9651537, 71.7373026, 84.1772734, 92.0379508, 101.3341148, 111.2364978, 138.1343235, 142.5318575,
    69.7851354, 72.5748178, 85.0874846, 92.9906686, 102.3341147, 112.2837501, 139.2972573, 143.7120745,
    70.6062327, 73.4129252, 85.9981519, 93.9436086, 103.3340950, 113.3308060, 140.4590456, 144.8913851,
    71.4281233, 74.2520533, 86.9092717, 94.8968020, 104.3340927, 114.3776181, 141.6202897, 146.0693172,
    72.2509192, 75.0917539, 87.8207981, 95.8501948, 105.3340992, 115.4241991, 142.7802538, 147.2468448,
    73.0743068, 75.9323537, 88.7327289, 96.8038135, 106.3340832, 116.4705626, 143.9399218, 148.4237353,
    73.8986451, 76.7737132, 89.6451205, 97.7576546, 107.3340811, 117.5167222, 145.0988613, 149.5994803,
    74.7239486, 77.6155564, 90.5578675, 98.7116977, 108.3340610, 118.5626439, 146.2567780, 150.7741332,
    75.5498332, 78.4582275, 91.4710392, 99.6659722, 109.3340549, 119.6083792, 147.4143247, 151.9481560,
    76.3767953, 79.3016833, 92.3846026, 100.6204468, 110.3340466, 120.6538833, 148.5710320, 153.1214972,
    77.2043196, 80.1459021, 93.2985417, 101.5751283, 111.3340416, 121.6992061, 149.7269259, 154.2947798,
    78.0327773, 80.9906334, 94.2129113, 102.5300155, 112.3340517, 122.7443227, 150.8821301, 155.4666110,
    78.8616622, 81.8362269, 95.1276165, 103.4850947, 113.3340347, 123.7892085, 152.0365245, 156.6372138,
    79.6914212, 82.6824775, 96.0426909, 104.4403761, 114.3340338, 124.8339126, 153.1904343, 157.8075974,
    80.5221817, 83.5292144, 96.9581704, 105.3958494, 115.3340309, 125.8784296, 154.3439952, 158.9771555,
    81.3532498, 84.3767650, 97.8739809, 106.3515161, 116.3340149, 126.9227500, 155.4965549, 160.1459265,
    82.1853464, 85.2251365, 98.7901808, 107.3073820, 117.3340028, 127.9668882, 156.6483029, 161.3142181,
    83.0179077, 86.0738570, 99.7067483, 108.2634210, 118.3340016, 129.0108373, 157.7993441, 162.4814017,
    83.8517135, 86.9233106, 100.6236273, 109.2196643, 119.3339996, 130.0546052, 158.9500323, 163.6484766,
    84.6859268, 87.7732833, 101.5408668, 110.1760966, 120.3339994, 131.0981539, 160.1000411, 164.8139007,
    85.5205464, 88.6239804, 102.4584466, 111.1326761, 121.3340015, 132.1415478, 161.2494235, 165.9797037,
    86.3556898, 89.4754217, 103.3763847, 112.0894440, 122.3339889, 133.1847835, 162.3981621, 167.1439232,
    87.1918785, 90.3271745, 104.2946499, 113.0464009, 123.3339931, 134.2278063, 163.5463563, 168.3083042,
    88.0289398, 91.1797623, 105.2132413, 114.0035319, 124.3339738, 135.2706746, 164.6939061, 169.4711986,
    88.8661824, 92.0327915, 106.1321745, 114.9608304, 125.3339611, 136.3133711, 165.8409481, 170.6337417,
    89.7043822, 92.8866729, 107.0513939, 115.9183079, 126.3339732, 137.3558952, 166.9873628, 171.7961414,
    90.5429399, 93.7407811, 107.9709580, 116.8759330, 127.3339639, 138.3982484, 168.1330226, 172.9571715,
    91.3823782, 94.5955866, 108.8908188, 117.8337547, 128.3339465, 139.4404282, 169.2784311, 174.1184432,
    92.2226223, 95.4509865, 109.8110068, 118.7917132, 129.3339425, 140.4824636, 170.4230097, 175.2780856,
    93.0628046, 96.3070693, 110.7315355, 119.7498356, 130.3339580, 141.5243162, 171.5671342, 176.4376645,
    93.9040097, 97.1634122, 111.6523031, 120.7081201, 131.3339342, 142.5660201, 172.7108880, 177.5963408,
    94.7459477, 98.0205239, 112.5734271, 121.6665934, 132.3339244, 143.6075913, 173.8537171, 178.7550826,
    95.5882026, 98.8780341, 113.4947906, 122.6251843, 133.3339232, 144.6489549, 174.9963580, 179.9125205,
    96.4316112, 99.7361177, 114.4164945, 123.5839497, 134.3339265, 145.6902088, 176.1382495, 181.0694697,
    97.2751458, 100.5947871, 115.3384945, 124.5428564, 135.3339288, 146.7312792, 177.2798697, 182.2266670,
    98.1190485, 101.4538244, 116.2607384, 125.5019333, 136.3339178, 147.7721921, 178.4208396, 183.3824571,
    98.9638925, 102.3135696, 117.1832839, 126.4611433, 137.3339147, 148.8129949, 179.5608505, 184.5377106,
    99.8088161, 103.1738527, 118.1061350, 127.4204951, 138.3339034, 149.8536001, 180.7007748, 185.6923483,
    100.6547406, 104.0343125, 119.0292645, 128.3800056, 139.3338996, 150.8940888, 181.8405291, 186.8465127,
    101.5012985, 104.8955333, 119.9526183, 129.3396638, 140.3339056, 151.9344323, 182.9791234, 188.0004360,
    102.3479742, 105.7571128, 120.8762810, 130.2994701, 141.3338872, 152.9746284, 184.1174840, 189.1533356,
    103.1953092, 106.6193948, 121.8002582, 131.2594188, 142.3338891, 154.0146754, 185.2554425, 190.3059982,
    104.0433280, 107.4818677, 122.7244192, 132.2195129, 143.3338983, 155.0545773, 186.3928835, 191.4585038,
    104.8918667, 108.3451210, 123.6488905, 133.1797141, 144.3338873, 156.0943616, 187.5298612, 192.6101817,
    105.7411848, 109.2087917, 124.5736030, 134.1400758, 145.3338857, 157.1340052, 188.6661878, 193.7609676,
    106.5904839, 110.0726272, 125.4985744, 135.1005659, 146.3338676, 158.1735098, 189.8023923, 194.9112310,
    107.4406285, 110.9372063, 126.4238216, 136.0611921, 147.3338649, 159.2128618, 190.9377693, 196.0617182,
    108.2914514, 111.8021584, 127.3492978, 137.0219528, 148.3338642, 160.2521132, 192.0729392, 197.2113621,
    109.1423167, 112.6675722, 128.2750417, 137.9828523, 149.3338642, 161.2911903, 193.2074986, 198.3598658,
    109.9936082, 113.5333599, 129.2010281, 138.9438788, 150.3338571, 162.3301815, 194.3419506, 199.5089167,
    110.8458868, 114.3998590, 130.1272611, 139.9050378, 151.3338544, 163.3689952, 195.4755047, 200.6565536,
    111.6982981, 115.2663634, 131.0537359, 140.8663165, 152.3338661, 164.4077066, 196.6090070, 201.8038913,
    112.5513161, 116.1335589, 131.9804525, 141.8277375, 153.3338513, 165.4462926, 197.7417967, 202.9512108,
    113.4046826, 117.0013024, 132.9074471, 142.7892672, 154.3338469, 166.4847583, 198.8741006, 204.0976197,
    114.2586009, 117.8693510, 133.8345868, 143.7509298, 155.3338377, 167.5230850, 200.0060229, 205.2436845,
    115.1129530, 118.7376500, 134.7620637, 144.7127143, 156.3338346, 168.5612932, 201.1380263, 206.3900908,
    115.9682439, 119.6065799, 135.6896807, 145.6746379, 157.3338472, 169.5994024, 202.2690183, 207.5350261,
    116.8231745, 120.4760395, 136.6175702, 146.6366489, 158.3338341, 170.6373530, 203.3996642, 208.6799871,
    117.6790793, 121.3456904, 137.5456793, 147.5987952, 159.3338281, 171.6751999, 204.5299763, 209.8238100,
    118.5353568, 122.2156820, 138.4740198, 148.5610518, 160.3338311, 172.7129351, 205.6600156, 210.9674202,
    119.3920903, 123.0863073, 139.4025806, 149.5234606, 161.3338255, 173.7505640, 206.7895148, 212.1110544,
    120.2493906, 123.9571244, 140.3313927, 150.4859515, 162.3338219, 174.7880278, 207.9186760, 213.2541980,
    121.1066478, 124.8284499, 141.2604006, 151.4485727, 163.3338188, 175.8254206, 209.0473409, 214.3962478,
    121.9649713, 125.7002389, 142.1896164, 152.4113002, 164.3338197, 176.8626836, 210.1757827, 215.5388338,
    122.8231067, 126.5722069, 143.1190158, 153.3741290, 165.3338307, 177.8998364, 211.3039033, 216.6799559,
    123.6819260, 127.4447556, 144.0486632, 154.3370998, 166.3338212, 178.9368683, 212.4311034, 217.8211292,
    124.5413664, 128.3175068, 144.9785495, 155.3001615, 167.3338106, 179.9737958, 213.5586092, 218.9618213,
    125.4010085, 129.1909584, 145.9085758, 156.2633231, 168.3338079, 181.0106206, 214.6854578, 220.1027807,
    126.2612647, 130.0643964, 146.8388686, 157.2266274, 169.3338013, 182.0473517, 215.8115692, 221.2420837,
    127.1218231, 130.9382316, 147.7693518, 158.1900043, 170.3337985, 183.0839554, 216.9379155, 222.3815410,
    127.9825024, 131.8126199, 148.7000270, 159.1535158, 171.3338039, 184.1204280, 218.0635989, 223.5207726,
    128.8440695, 132.6872710, 149.6309038, 160.1171326, 172.3337982, 185.1568178, 219.1886422, 224.6593596,
    129.7055844, 133.5625026, 150.5619852, 161.0808387, 173.3337920, 186.1931010, 220.3135898, 225.7978269,
    130.5677803, 134.4378565, 151.4933007, 162.0446432, 174.3338082, 187.2292741, 221.4382597, 226.9363032,
    131.4303668, 135.3135455, 152.4247899, 163.0085719, 175.3337875, 188.2653453, 222.5625209, 228.0736345,
    132.2930890, 136.1899556, 153.3564319, 163.9725939, 176.3337964, 189.3013301, 223.6864893, 229.2107313,
    133.1563813, 137.0663487, 154.2883191, 164.9367197, 177.3337840, 190.3371913, 224.8099166, 230.3472169,
    134.0201090, 137.9430333, 155.2203552, 165.9009555, 178.3337994, 191.3729527, 225.9330619, 231.4834709,
    134.8842751, 138.8205346, 156.1526418, 166.8652753, 179.3337758, 192.4086253, 227.0563071, 232.6197749,
    135.7489345, 139.6978943, 157.0850528, 167.8297009, 180.3337700, 193.4441917, 228.1784515, 233.7550628,
    136.6136371, 140.5755903, 158.0176677, 168.7942285, 181.3337919, 194.4796629, 229.3006240, 234.8903443,
    137.4789054, 141.4538718, 158.9504988, 169.7588581, 182.3337708, 195.5150598, 230.4226479, 236.0251154,
    138.3442775, 142.3322896, 159.8834751, 170.7235783, 183.3337644, 196.5503182, 231.5440536, 237.1595681,
    139.2102763, 143.2112185, 160.8166662, 171.6883908, 184.3337671, 197.5854937, 232.6654116, 238.2940493,
    140.0766303, 144.0904491, 161.7500486, 172.6533003, 185.3337613, 198.6205929, 233.7860142, 239.4282004,
    140.9430694, 144.9699228, 162.6835553, 173.6183000, 186.3337577, 199.6555918, 234.9065071, 240.5613081,
    141.8101366, 145.8499232, 163.6172828, 174.5834324, 187.3337527, 200.6904933, 236.0270271, 241.6946039,
    142.6773643, 146.7299182, 164.5511916, 175.5485994, 188.3337662, 201.7252729, 237.1466462, 242.8267020,
    143.5453183, 147.6103103, 165.4852434, 176.5138884, 189.3337559, 202.7599874, 238.2662575, 243.9590103,
    144.4131652, 148.4912058, 166.4194797, 177.4792663, 190.3337682, 203.7946179, 239.3853961, 245.0911579,
    145.2816077, 149.3724087, 167.3539075, 178.4447517, 191.3337641, 204.8291237, 240.5045805, 246.2228528,
    146.1505328, 150.2535459, 168.2884759, 179.4102931, 192.3337449, 205.8635702, 241.6231669, 247.3542283,
    147.0195184, 151.1355378, 169.2232355, 180.3759364, 193.3337445, 206.8979237, 242.7415227, 248.4854899,
    147.8889802, 152.0174294, 170.1581563, 181.3416701, 194.3337475, 207.9321758, 243.8595642, 249.6163393,
    148.7588804, 152.8996530, 171.0932401, 182.3074904, 195.3337453, 208.9663706, 244.9770165, 250.7457882,
    149.6286408, 153.7821881, 172.0285215, 183.2734127, 196.3337351, 210.0004507, 246.0948220, 251.8764407,
    150.4995455, 154.6652295, 172.9639164, 184.2394258, 197.3337338, 211.0344428, 247.2116189, 253.0061616,
    151.3697245, 155.5484041, 173.8995538, 185.2055101, 198.3337578, 212.0683460, 248.3283537, 254.1349870,
    152.2408353, 156.4321471, 174.8352679, 186.1716580, 199.3337262, 213.1021993, 249.4451726, 255.2637984,
  };

  public void testChiSquared() {
    int position = 0;
    for (int degreesOfFreedom = 1; degreesOfFreedom <= 200; ++degreesOfFreedom) {
      assertEquals("v=" + degreesOfFreedom + " p=0.005", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.005), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.01", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.010), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.1", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.100), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.25", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.250), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.5", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.500), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.75", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.750), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.99", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.990), 1.0E-3);
      assertEquals("v=" + degreesOfFreedom + " p=0.995", CHI_TESTS[position++], ChiSquared.chi(degreesOfFreedom, 0.995), 1.0E-3);
    }
  }

  public void testErf() {
    assertTrue(Double.isNaN(ChiSquared.erf(Double.NaN)));
    assertEquals(1.0, ChiSquared.erf(Double.POSITIVE_INFINITY), 1.0E-12);
    assertEquals(-1.0, ChiSquared.erf(Double.NEGATIVE_INFINITY), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(Double.MAX_VALUE), 1.0E-12);
    assertEquals(0.0, ChiSquared.erf(0.0), 1.0E-12);

    assertEquals(0.1124629160182848922032750717, ChiSquared.erf(0.1), 1.0E-12);
    assertEquals(0.2227025892104784541401390068, ChiSquared.erf(0.2), 1.0E-12);
    assertEquals(0.3286267594591274276389140479, ChiSquared.erf(0.3), 1.0E-12);
    assertEquals(0.4283923550466684551036038453, ChiSquared.erf(0.4), 1.0E-12);
    assertEquals(0.5204998778130465376827466539, ChiSquared.erf(0.5), 1.0E-12);
    assertEquals(0.6038560908479259225626224361, ChiSquared.erf(0.6), 1.0E-12);
    assertEquals(0.6778011938374184729756288092, ChiSquared.erf(0.7), 1.0E-12);
    assertEquals(0.7421009647076604861671105865, ChiSquared.erf(0.8), 1.0E-12);
    assertEquals(0.7969082124228321285187247851, ChiSquared.erf(0.9), 1.0E-12);
    assertEquals(0.8427007929497148693412206351, ChiSquared.erf(1.0), 1.0E-12);
    assertEquals(0.8802050695740816997718677663, ChiSquared.erf(1.1), 1.0E-12);
    assertEquals(0.9103139782296353802384057757, ChiSquared.erf(1.2), 1.0E-12);
    assertEquals(0.9340079449406524366038933275, ChiSquared.erf(1.3), 1.0E-12);
    assertEquals(0.9522851197626488105164826915, ChiSquared.erf(1.4), 1.0E-12);
    assertEquals(0.9661051464753107270669762616, ChiSquared.erf(1.5), 1.0E-12);
    assertEquals(0.9763483833446440077742834471, ChiSquared.erf(1.6), 1.0E-12);
    assertEquals(0.9837904585907745636262425881, ChiSquared.erf(1.7), 1.0E-12);
    assertEquals(0.9890905016357307141837328108, ChiSquared.erf(1.8), 1.0E-12);
    assertEquals(0.9927904292352574699483575393, ChiSquared.erf(1.9), 1.0E-12);
    assertEquals(0.9953222650189527341620692564, ChiSquared.erf(2.0), 1.0E-12);
    assertEquals(0.9970205333436670144961149834, ChiSquared.erf(2.1), 1.0E-12);
    assertEquals(0.998137153702018108556548244, ChiSquared.erf(2.2), 1.0E-12);
    assertEquals(0.9988568234026433485346525406, ChiSquared.erf(2.3), 1.0E-12);
    assertEquals(0.9993114861033549214302550678, ChiSquared.erf(2.4), 1.0E-12);
    assertEquals(0.9995930479825550410604357843, ChiSquared.erf(2.5), 1.0E-12);
    assertEquals(0.9997639655834706507960089968, ChiSquared.erf(2.6), 1.0E-12);
    assertEquals(0.9998656672600594756708598813, ChiSquared.erf(2.7), 1.0E-12);
    assertEquals(0.9999249868053345409757767548, ChiSquared.erf(2.8), 1.0E-12);
    assertEquals(0.9999589021219005411643161325, ChiSquared.erf(2.9), 1.0E-12);
    assertEquals(0.9999779095030014145586272239, ChiSquared.erf(3.0), 1.0E-12);
    assertEquals(0.9999883513426328004039662938, ChiSquared.erf(3.1), 1.0E-12);
    assertEquals(0.9999939742388482379050282576, ChiSquared.erf(3.2), 1.0E-12);
    assertEquals(0.9999999229960725430358713018, ChiSquared.erf(3.8), 1.0E-12);
    assertEquals(0.9999999652077514027682577217, ChiSquared.erf(3.9), 1.0E-12);
    assertEquals(0.9999999845827420997199811478, ChiSquared.erf(4.0), 1.0E-12);
    assertEquals(0.9999999932999723459151016273, ChiSquared.erf(4.1), 1.0E-12);
    assertEquals(0.9999999971445058204078113843, ChiSquared.erf(4.2), 1.0E-12);
    assertEquals(0.999999998806528206277958696, ChiSquared.erf(4.3), 1.0E-12);
    assertEquals(0.9999999995108289729394111582, ChiSquared.erf(4.4), 1.0E-12);
    assertEquals(0.9999999998033839558457112524, ChiSquared.erf(4.5), 1.0E-12);
    assertEquals(0.9999999999225040040255816811, ChiSquared.erf(4.6), 1.0E-12);
    assertEquals(0.9999999999700474021362033968, ChiSquared.erf(4.7), 1.0E-12);
    assertEquals(0.999999999988647856415078039, ChiSquared.erf(4.8), 1.0E-12);
    assertEquals(0.9999999999957810634759942186, ChiSquared.erf(4.9), 1.0E-12);
    assertEquals(0.9999999999999999280959021645, ChiSquared.erf(5.9), 1.0E-12);
    assertEquals(0.9999999999999999784802632875, ChiSquared.erf(6.0), 1.0E-12);
    assertEquals(0.9999999999999999936853978498, ChiSquared.erf(6.1), 1.0E-12);
    assertEquals(0.9999999999999999981833243828, ChiSquared.erf(6.2), 1.0E-12);
    assertEquals(0.9999999999999999994875778313, ChiSquared.erf(6.3), 1.0E-12);
    assertEquals(0.9999999999999999998582919652, ChiSquared.erf(6.4), 1.0E-12);
    assertEquals(0.9999999999999999999999999938, ChiSquared.erf(7.6), 1.0E-12);
    assertEquals(0.9999999999999999999999999987, ChiSquared.erf(7.7), 1.0E-12);
    assertEquals(0.9999999999999999999999999997, ChiSquared.erf(7.8), 1.0E-12);
    assertEquals(0.9999999999999999999999999999, ChiSquared.erf(7.9), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(8.0), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(8.1), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(8.8), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(8.9), 1.0E-12);
    assertEquals(1.0, ChiSquared.erf(9.0), 1.0E-12);

    /* check symmetry about 0 */
    for (double x = 0.01; x < 5.0; x += 0.01) {
      assertEquals(-ChiSquared.erf(-x), ChiSquared.erf(x), 1.0E-12);
    }
  }

  public void testErfc() {
    assertTrue(Double.isNaN(ChiSquared.erfc(Double.NaN)));
    assertEquals(0.0, ChiSquared.erfc(Double.POSITIVE_INFINITY), 1.0E-12);
    assertEquals(2.0, ChiSquared.erfc(Double.NEGATIVE_INFINITY), 1.0E-12);
    assertEquals(0.0, ChiSquared.erfc(Double.MAX_VALUE), 1.0E-12);

    // should be 1.0 - erf(x)
    for (double x = -10.0; x < 10.0; x += 0.01) {
      assertEquals(1.0 - ChiSquared.erf(x), ChiSquared.erfc(x), 1.0E-12);
    }
  }

  public void testNormal() {
    assertTrue(Double.isNaN(ChiSquared.normal(Double.NaN)));
    assertEquals(1.0, ChiSquared.normal(Double.POSITIVE_INFINITY), 1.0E-12);
    assertEquals(0.0, ChiSquared.normal(Double.NEGATIVE_INFINITY), 1.0E-12);
    assertEquals(1.0, ChiSquared.normal(Double.MAX_VALUE), 1.0E-12);
    assertEquals(0.5, ChiSquared.normal(0.0), 1.0E-12);
    assertEquals(0.97725, ChiSquared.normal(2.0), 1.0E-4);
    assertEquals(0.69146, ChiSquared.normal(0.5), 1.0E-4);
    assertEquals(0.53983, ChiSquared.normal(0.1), 1.0E-4);

    // in terms of error function
    for (double x = -10.0; x < 10.0; x += 0.01) {
      assertEquals(ChiSquared.erfc(-x / Math.sqrt(2.0)) / 2.0, ChiSquared.normal(x), 1.0E-12);
    }
  }
}
